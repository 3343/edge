##
# @file This file is part of EDGE.
#
# @author Alexander Breuer (breuer AT mytum.de)
#
# @section LICENSE
# Copyright (c) 2020, Friedrich Schiller University Jena
# Copyright (c) 2020, Alexander Breuer
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
# Pipline template which tests different builds of EDGE.
##
steps:
  - label: 'Dependencies ({{i_isa}})'
    key: 'deps'
    agents:
      isa: {{i_isa}}
    command:
      - export CC=${EDGE_CC_SEQ}
      - export CXX=${EDGE_CXX_SEQ}
      - echo "--- LIBXSMM"
      - ./tools/build/deps/libxsmm.sh -i $(pwd)/submodules/libxsmm -o $(pwd)/deps -j ${EDGE_N_BUILD_PROCS}
      - echo "--- zlib"
      - ./tools/build/deps/zlib.sh -o $(pwd)/deps -j ${EDGE_N_BUILD_PROCS}
      - echo "--- HDF5"
      - ./tools/build/deps/hdf5.sh -z $(pwd)/deps -o $(pwd)/deps -j ${EDGE_N_BUILD_PROCS}
      - echo "--- Gmsh"
      - ./tools/build/deps/gmsh.sh -p $(pwd)/tools/gmsh -o $(pwd)/deps -j ${EDGE_N_BUILD_PROCS}
      - echo "--- METIS"
      - ./tools/build/deps/metis.sh -p $(pwd)/tools/build/deps/metis.patch -o $(pwd)/deps -j ${EDGE_N_BUILD_PROCS}
      - echo "--- EDGE-V"
      - cd tools/edge_v
      - scons parallel=none zlib=../../deps hdf5=../../deps gmsh=../../deps metis=../../deps install_dir=../../deps/edge_v_none -j ${EDGE_N_BUILD_PROCS}
      - scons parallel=omp zlib=../../deps hdf5=../../deps gmsh=../../deps metis=../../deps install_dir=../../deps/edge_v_omp -j ${EDGE_N_BUILD_PROCS}
      - cd ../..

      - echo "--- Build Artifact Upload"
      - tar -cJf deps.tar.xz deps
      - buildkite-agent artifact upload deps.tar.xz
{% for l_build in i_builds %}
{%- macro toScons(i_build) %}cfr={{i_build.cfr}} equations={{i_build.equations}} element_type={{i_build.element_type}} order={{i_build.order}} precision={{i_build.precision}}{% endmacro %}
  - label: 'EDGE ({{i_isa}} {{toScons(l_build)}})'
    depends_on: 'deps'
    agents:
      isa: {{i_isa}}
    command:
      - export CXX=${EDGE_CXX_SEQ}
      - export OMPI_CXX=${EDGE_CXX_SEQ}

      - echo "--- Build Artifact Download"
      - buildkite-agent artifact download deps.tar.xz .
      - tar -xf deps.tar.xz

      - echo "--- EDGE"
      - scons {{toScons(l_build)}} mode=debug+san tests=1 parallel=none zlib=deps hdf5=deps gmsh=deps xsmm=deps edge_v=deps/edge_v_none -j ${EDGE_N_BUILD_PROCS}
      - ./build/tests
      - scons {{toScons(l_build)}} mode=debug+san tests=1 parallel=omp zlib=deps hdf5=deps gmsh=deps xsmm=deps edge_v=deps/edge_v_omp -j ${EDGE_N_BUILD_PROCS}
      - ./build/tests
      - CXX=${EDGE_CXX_MPI} scons {{toScons(l_build)}} mode=debug+san parallel=mpi zlib=deps hdf5=deps gmsh=deps xsmm=deps edge_v=deps/edge_v_none -j ${EDGE_N_BUILD_PROCS}
      - ./build/tests
      - CXX=${EDGE_CXX_MPI} scons {{toScons(l_build)}} mode=debug+san parallel=mpi+omp zlib=deps hdf5=deps gmsh=deps xsmm=deps edge_v=deps/edge_v_omp -j ${EDGE_N_BUILD_PROCS}
      - ./build/tests
{% endfor %}
