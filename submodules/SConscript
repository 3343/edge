##
# @file This file is part of EDGE.
#
# @author Alexander Breuer (anbreuer AT ucsd.edu)
#         Alexander Heinecke (alexander.heinecke AT intel.com)
#
# @section LICENSE
# Copyright (c) 2015-2018, Regents of the University of California
# Copyright (c) 2016, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
# Source files in the submodules.
##
import os
import warnings
import subprocess

# get dir of scons script
l_scriptDir = Dir('.').srcnode().abspath

import os
from sys import path

Import('env')
Import('conf')

l_objects = []

# add pugixml
l_objects.append( env.Object( 'pugixml/src/pugixml.cpp' ) )

# enable libdl available
conf.CheckLibWithHeaderFlags('dl', '', 'CXX', [], [], True)

# forward libxsmm
if env['xsmm'] != False:
  if env['xsmm'] != True:
    env.AppendUnique( CPPPATH=[ env['xsmm']+'/include'] )
    env.AppendUnique( LIBPATH=[ env['xsmm']+'/lib']     )

  if conf.CheckLibWithHeaderFlags( 'libxsmmnoblas', 'libxsmm.h' ) and \
     conf.CheckLibWithHeaderFlags( 'libxsmm', 'libxsmm.h' ):
    env.AppendUnique( LINKFLAGS=['-pthread'] )
    if env['cfr'] == '1':
      env.AppendUnique( CPPDEFINES=['PP_T_KERNELS_XSMM_DENSE_SINGLE'] )
    else:
      env.AppendUnique( CPPDEFINES=['PP_T_KERNELS_XSMM'] )
  else:
    warnings.warn('  Warning: Could not find libxsmm, continuing without.' )
    env.AppendUnique( CPPDEFINES=['PP_T_KERNELS_VANILLA'] )
else:
  env.AppendUnique( CPPDEFINES=['PP_T_KERNELS_VANILLA'] )

# enable zlib if available
if env['zlib'] != False:
  if env['zlib'] != True:
    env.AppendUnique( CPPPATH=[ env['zlib']+'/include'] )
    env.AppendUnique( LIBPATH=[ env['zlib']+'/lib']     )
  conf.CheckLibWithHeaderFlags( 'z', 'zlib.h', 'CXX' )

# enable HDF5 if available
if env['hdf5'] != False:
  if env['hdf5'] != True:
    env.AppendUnique( CPPPATH=[ env['hdf5']+'/include'] )
    env.AppendUnique( LIBPATH=[ env['hdf5']+'/lib']     )
  if conf.CheckLibWithHeaderFlags( 'hdf5' ) and conf.CheckLibWithHeaderFlags( 'hdf5_hl' ):
    env.AppendUnique( CPPDEFINES = ['PP_HAS_HDF5'] )

# forward MOAB
if env['moab'] != False:
  if env['moab'] != True:
    env.AppendUnique( CPPPATH=[ env['moab']+'/include'] )
    env.AppendUnique( LIBPATH=[ env['moab']+'/lib']     )
    env.AppendUnique( LIBPATH=[ env['moab']+'/lib64'] )

  # forward CGNS if available
  conf.CheckLibWithHeaderFlags( 'cgns' )

  # forward ifcore if available
  conf.CheckLibWithHeaderFlags( 'ifcore' )

  if conf.CheckLibWithHeaderFlags( 'MOAB', 'moab/Core.hpp' ):
    env.AppendUnique( CPPDEFINES=['PP_T_MESH_UNSTRUCTURED'] )
    env.AppendUnique( CPPDEFINES=['PP_USE_MOAB'] )
  else:
    warnings.warn( 'Warning: Could not find MOAB, falling back to structured meshes.' )
    env['moab'] = False

# use regular meshes if not MOAB
if env['moab'] == False:
  env.AppendUnique( CPPDEFINES=['PP_T_MESH_REGULAR'] )

# create visit writer separately to get around "format string" warnings
env.sources.append( env.Object( 'visit_writer/visit_writer.cpp',
                                CXXFLAGS = env['CXXFLAGS']+
                                           ['-Wno-error']+
                                           ['-Wno-shadow']+
                                           ['-Wno-unused-variable']+
                                           ['-Wno-format-security'] ) )

# create easylogging separately to get around shadow warnings
l_def = ['ELPP_NO_DEFAULT_LOG_FILE']
if 'omp' in env['parallel']: l_def=l_def+['ELPP_THREAD_SAFE']
env.sources.append( env.Object( 'easylogging/src/easylogging++.cc',
                                CXXFLAGS   = env['CXXFLAGS']+
                                             ['-Wno-shadow'],
                                CPPDEFINES = l_def ) )

# compile numerical libs separately
l_numLibs = [ 'FastGL/fastgl.cpp' ]
for l_lib in l_numLibs:
  env.sources.append( env.Object( l_lib,
                                  CXXFLAGS = env['CXXFLAGS']+
                                             ['-Wno-error']+
                                             ['-Wno-all']+
                                             ['-Wno-shadow']+
                                             ['-Wno-unused-variable'] ) )

# compile default soruces
for l_object in l_objects:
  env.sources.append( l_object )

# add EDGE's pre-processed data
def csvToCpp( target, source, env ):
  assert( len(target) == 1 )
  assert( len(source) == 1 )

  # assemble args
  l_in  = source[0].get_abspath()
  l_ons = env['edge_pre'][source[0].get_abspath()]['ons']
  l_on  = env['edge_pre'][source[0].get_abspath()]['on']
  l_ot  = env['edge_pre'][source[0].get_abspath()]['ot']
  l_out = target[0].get_abspath()

  l_comm = [ 'tools/edge_pre/cpp.py',
             '-i', l_in,
             '-s', l_ons,
             '-n', l_on,
             '-t', l_ot,
             '-o', l_out ]
  if 'r' in env['edge_pre'][source[0].get_abspath()]:
    l_comm = l_comm + ['-r'] + env['edge_pre'][source[0].get_abspath()]['r']
  l_proc = subprocess.Popen( l_comm, stdout=subprocess.PIPE )
  l_pOut, l_pErr = l_proc.communicate()
  print( l_pOut )

edgePre = {}
edgePre['src'] = []
env['edge_pre'] = {}

# EDGEpre's DG data
l_dgPre =  ['mass', 'stiffT', 'stiffV', 'fluxL', 'fluxN', 'fluxT']
# EDGEpre's SC data
l_scPre = ['svcrds', 'scsv', 'scsfsc', 'sctysf', 'scdgad', 'gather', 'scatter', 'scattersurf', 'sfint']

# add EDGEpre's data
for l_pre in l_dgPre+l_scPre:
  # set type
  if l_pre in l_dgPre:
    l_ty = 'dg'
  else:
    l_ty = 'sc'

  # generate file names
  l_dir = 'edge_pre/' + l_ty + '/' + env['element_type'] + '/' + str( int(env['order'])-1 ) + '/'
  l_base = l_dir + env['element_type'] +\
             '_' +str( int(env['order'])-1 ) + '_' + l_pre
  l_csv = File( l_scriptDir + '/' + l_base + '.csv' )
  l_cpp = File( l_base + '.cpp' )

  # set info
  env['edge_pre'][l_csv.get_abspath()] = {}
  env['edge_pre'][l_csv.get_abspath()]['ons'] = l_ty
  env['edge_pre'][l_csv.get_abspath()]['on']  = l_pre

  if l_pre in ['svcrds', 'gather', 'scatter', 'scattersurf', 'sfint']+l_dgPre:
    env['edge_pre'][l_csv.get_abspath()]['ot']  = 'double'
  elif l_pre in ['scsv', 'scsfsc', 'sctysf', 'scdgad']:
    env['edge_pre'][l_csv.get_abspath()]['ot']  = 'unsigned short'
    env['edge_pre'][l_csv.get_abspath()]['r']  = ['-1', 'std::numeric_limits< unsigned short >::max()']
  else: assert( False )

  # create command to build file
  env.Command( l_cpp, l_csv, csvToCpp )

  # append object to edge_pre library
  edgePre['src'].append( l_cpp )

# create a library out of EDGE's pre-processed data
edgePre['lib'] = env.StaticLibrary( 'edge_pre/edge_pre', edgePre['src'] )

# attach library to build
env.Append( LIBS = edgePre['lib'] )

Export('conf')
Export('env')
