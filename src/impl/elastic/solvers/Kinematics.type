/**
 * @file This file is part of EDGE.
 *
 * @author Alexander Breuer (anbreuer AT ucsd.edu)
 *
 * @section LICENSE
 * Copyright (c) 2017, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @section DESCRIPTION
 * Data types of kinematic sources.
 **/

#ifndef KINEMATICS_TYPE
#define KINEMATICS_TYPE

namespace edge {
  namespace elastic {
    namespace solvers {
      template< unsigned short TL_N_DIM,
                unsigned short TL_N_MODES,
                unsigned short TL_N_FSRCS,
                typename TL_T_REAL,
                typename TL_T_INT_LID >
      struct t_Kinematics;
    }
  }
}

/**
 * Data type of a single or multiple (fused) kinematic sources.
 *
 * @paramt TL_N_DIM number of dimensions.
 * @paramt TL_N_MODES number of modes.
 * @paramt TL_N_FSRCS number of fused kinematic sources.
 * @paramt TL_T_REAL floating point precision.
 * @paramt TL_T_INT_LID integral type for local ids.
 **/
template< unsigned short TL_N_DIM,
          unsigned short TL_N_MODES,
          unsigned short TL_N_FSRCS,
          typename TL_T_REAL,
          typename TL_T_INT_LID >
struct edge::elastic::solvers::t_Kinematics {
  //! number of values in the stress tensors
  static unsigned short const TL_N_STRESS = (TL_N_DIM==2) ? 3 : 6;

  //! total number of sources (includes duplicates for send-elements)
  TL_T_INT_LID nSrcs;

  //! true if the slip direction is active
  bool aSlip[TL_N_DIM];

  //! dense ids of the sources
  TL_T_INT_LID *soElDe;

  //! onset time of the sources, shared among all fused sources
  TL_T_REAL *onSet;

  //! time step of the slip-rate sampling.
  TL_T_REAL *dt;

  //! evaluated DG-basis at the point sources, scaled with inverse jacobian
  TL_T_REAL (*bEval)[TL_N_MODES];

  //! id of the first slip-rate sample for every dimension and source, last ghost-entry gives the total number of samples 
  TL_T_INT_LID *first[TL_N_DIM];

  //! scaling of the slip; [*][][][]: slip direction, [][*][][]: source [][][*][]: entries of the moment tensor,[][][*]: fused runs
  TL_T_REAL (*sSca[TL_N_DIM])[TL_N_STRESS][TL_N_FSRCS];

  //! pointer to slip rates of the sources
  TL_T_REAL (*sr[TL_N_DIM])[TL_N_FSRCS];
};

#endif
