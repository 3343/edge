##
# @file This file is part of EDGE.
#
# @author Alexander Breuer (anbreuer AT ucsd.edu)
#
# @section LICENSE
# Copyright (c) 2016-2018, Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
#
# Debian bootstrap for EDGE and supporting software.
# Build a container via: `sudo singularity build ./edge.simg ./debian.def`
##
BootStrap: debootstrap
OSVersion: jessie
MirrorURL: http://ftp.us.debian.org/debian/
Include:

%post
  #####################
  # Prepare build env #
  #####################
  echo "preparing build env"
  echo "deb http://http.us.debian.org/debian testing main non-free contrib"     >>  /etc/apt/sources.list
  echo "deb-src http://http.us.debian.org/debian testing main non-free contrib" >>  /etc/apt/sources.list
  apt-get update -qq -o=Dpkg::Use-Pty=0

  # silence frontend
  export DEBIAN_FRONTEND=noninteractive

  export INSTALL_DIR=/tmp/singularity_install_$(date +'%s')

  export N_BUILD_PROC=$(cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print $NF}')

  # move to tmp dir
  mkdir ${INSTALL_DIR}
  cd ${INSTALL_DIR}

  apt-get install -qq -o=Dpkg::Use-Pty=0 -y wget
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y unzip
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y make
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y cmake
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y scons=2.3.1-2
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y am-utils
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y git
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y libxml2-utils
  apt-get install -qq -o=Dpkg::Use-Pty=0 -y dh-autoreconf

  #################
  # gnu compilers #
  #################
  echo "installing gnu compilers"
  echo "Package: gcc"           >  /etc/apt/preferences.d/gcc
  echo "Pin: release a=testing" >> /etc/apt/preferences.d/gcc
  echo "Pin-Priority: 100"      >> /etc/apt/preferences.d/gcc

  apt-get install -t testing -qq -o=Dpkg::Use-Pty=0 -y g++-6

  # set links
  ln -f -s /usr/bin/g++-6      /usr/bin/g++
  ln -f -s /usr/bin/gcc-6      /usr/bin/gcc

  ###########
  # OpenMPI #
  ###########
  #echo "installing openmpi"
  #wget --no-check-certificate https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.4.tar.gz
  #tar -xzf openmpi-1.10.4.tar.gz
  #cd openmpi-1.10.4
  #./configure --enable-static --disable-shared
  #make install
  #cd ..

  ########
  # Gmsh #
  ########
  #wget http://gmsh.info/src/gmsh-2.13.1-source.tgz
  #tar -xzf gmsh-2.13.1-source.tgz
  #cd gmsh-2.13.1-source
  #cmake .
  #make install
  #cd ..

  ############
  # Clean up #
  ############
  apt-get clean

%appinstall edge
  export N_BUILD_PROC=$(cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print $NF}')

  ########
  # zlib #
  ########
  wget http://zlib.net/zlib-1.2.11.tar.gz -O zlib.tar.gz
  mkdir zlib
  tar -xzf zlib.tar.gz -C zlib --strip-components=1
  cd zlib
  ./configure --static --prefix=/usr/local > /dev/null
  make install -j ${N_BUILD_PROC} > /dev/null
  cd ..

  ########
  # HDF5 #
  ########
  wget https://www.hdfgroup.org/package/gzip/?wpdmdl=11810 -O hdf5.tar.gz
  mkdir hdf5
  tar -xzf hdf5.tar.gz -C hdf5 --strip-components=1
  cd hdf5
  ./configure --enable-shared=no --prefix=/usr/local > /dev/null 2> /dev/null
  make install -j ${N_BUILD_PROC} > /dev/null
  cd ..

  ########
  # EDGE #
  ########
  echo 'building edge'
  git clone https://github.com/3343/edge.git
  cd edge
  git checkout develop
  git submodule init
  git submodule update

  # build libxsmm
  cd submodules/libxsmm
  PREFIX=/usr/local make BLAS=0 install -j ${N_BUILD_PROC} > /dev/null
  cd ../..

  # build moab
  cd submodules/moab
  LANG=C autoreconf -fi
  # sequential
  CC=gcc CXX=g++ ./configure --disable-debug --enable-optimize --enable-shared=no --enable-static=yes --disable-fortran --enable-tools --disable-blaslapack --with-eigen3=$(pwd)/../eigen --with-hdf5=yes --with-netcdf=no --with-pnetcdf=no --with-metis=yes --download-metis > /dev/null
  make install -j ${N_BUILD_PROC} > /dev/null
  cd ../..

  for order in 1 2 3 4 5
  do
    # haswell
    for mesh_type in reg uns
    do
      if [ "${mesh_type}" = "reg" ]; then moab=no; else moab=yes; fi

      CXX=g++ scons equations=elastic element_type=tet4 order=${order} cfr=1 arch=hsw precision=32 xsmm=yes zlib=yes hdf5=yes netcdf=no moab=${moab} parallel=omp -j ${N_BUILD_PROC} > /dev/null
      cp build/edge /bin/edge_elastic_${mesh_type}_o${order}_cfr1_hsw_xsmm_omp
    done

    # AVX512
    for mesh_type in reg uns
    do
      if [ "${mesh_type}" = "reg" ]; then moab=no; else moab=yes; fi

      for cfr in 1 16
      do
        CXX=g++ scons equations=elastic element_type=tet4 order=${order} cfr=${cfr} arch=avx512 precision=32 xsmm=yes zlib=yes hdf5=yes netcdf=no moab=${moab} parallel=omp -j ${N_BUILD_PROC} > /dev/null
        cp build/edge /bin/edge_elastic_${mesh_type}_o${order}_cfr${cfr}_avx512_xsmm_omp
      done
    done
  done
  cd ..

  ############
  # Clean up #
  ############
  echo "cleaning up"
  rm -rf ${INSTALL_DIR}

%apphelp edge
   Installation of the Extreme-scale Discontinuous Galerkin Environment (EDGE).
   http://dial3343.org

   Supported configurations:
     * AVX2 (Haswell, EPYC):
       - tetrahedral elements
       - elastic wave equations
       - orders 1-5
       - regular (runtime generated) and unstructured meshes (MOAB)
       - HDF5 support
       - non-fused simulations (1 concurrent run) only
       - single precision arithmetic (32bit)
       - parallelization: LIBXSMM (SIMD), OpenMP (multicore)
     * AVX512 (Knights Landing, Skylake, Knights Mill), everything as AVX2 except for:
       - non-fused simulations (1 concurrent run)
       - fused simulations (16 concurrent runs)

%apprun edge
  # check input
  if [ "$#" -ne 1 ]
  then
    echo "Error: Only one command line argument, containing EDGE's xml-file, is allowed."
    exit 1
  fi

  # parse xml
  MOAB="$(echo "cat /edge/build/moab/text()" | xmllint --nocdata --shell $* | sed -n -e 2p)"
  ORDER="$(echo "cat /edge/build/order/text()" | xmllint --nocdata --shell $* | sed -n -e 2p)"
  CFR="$(echo "cat /edge/build/cfr/text()" | xmllint --nocdata --shell $* | sed -n -e 2p )"
  ARCH="$(echo "cat /edge/build/arch/text()" | xmllint --nocdata --shell $* | sed -n -e 2p)"

  # derive mesh type
  if [ "${MOAB}" = "no" ]
  then
    MESH_TYPE=reg
  else
    MESH_TYPE=uns
  fi

  # catch non-supported executables
  if [ "${CFR}" != "1" ] && [ "${CFR}" != "16" ]
  then
    echo "CFR-tag: is not supported (<cfr>CFR</cfr>); ${CFR}"
    exit 1
  fi

  if [ "${ORDER}" != "1" ] && [ "${ORDER}" != "2" ] && [ "${ORDER}" != "3" ] && [ "${ORDER}" != "4" ] && [ "${ORDER}" != "5" ]
  then
    echo "Error: ORDER-tag is not supported (<order>ORDER</order>); ${ORDER}"
    exit 1
  fi

  if [ "${ARCH}" != "hsw" ] && [ "${ARCH}" != "avx512" ]
  then
    echo "Warning: ARCH-tag is not supported (<arch>ARCH</arch>): ${ARCH}; falling back to hsw and CFR=1"
    ARCH=hsw
    CFR=1
  fi

  # define excecutable
  EDGE_EXEC=edge_elastic_${MESH_TYPE}_o${ORDER}_cfr${CFR}_${ARCH}_xsmm_omp

  # run EDGE
  ${EDGE_EXEC} -x $*
