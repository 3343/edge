##
# @file This file is part of EDGE.
#
# @author Alexander Breuer (anbreuer AT ucsd.edu)
#
# @section LICENSE
# Copyright (c) 2016-2019, Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
# Suppressions for valgrind.
##

{
   GLIBC
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:_dlerror_run
   fun:dlopen@@GLIBC_*
}

{
   MOAB, HDF5: Unitialized values
   Memcheck:Cond
   fun:__intel_sse2_strcpy
   fun:H5MM_xstrdup
   fun:H5E_register_class
   fun:H5E_init_interface
   fun:H5E_init
   fun:H5_init_library
   fun:H5open
   fun:__sti__$E
   fun:__libc_csu_init
   fun:(below main)
}

{
   gomp_pthread_create
   Memcheck:Leak
   match-leak-kinds: possible
   fun:calloc
   ...
   fun:pthread_create*
   ...
   fun:GOMP_parallel
   fun:*edge*parallel*Shared*init*
   fun:main
}

{
   iomp_sched_setaffinity
   Memcheck:Param
   sched_setaffinity(mask)
   ...
   fun:*kmpc_*
   ...
   fun:main
}

{
   start_thread
   Memcheck:Leak
   match-leak-kinds: definite
   ...
   fun:*event_base_loop
   ...
   fun:start_thread
   fun:clone
}

{
   hwloc_topology
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:hwloc_topology_*
}

{
   orte_init_invalid_read
   Memcheck:Addr8
   fun:vsscanf
   ...
   fun:orte_init
}

{
   orte_init_leak
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:orte_init
}

{
   PMPI_Init_Cond
   Memcheck:Cond
   ...
   fun:ompi_mpi_init
   fun:PMPI_Init_thread
   fun:*edge*parallel*Mpi*start*
}

{
   PMPI_Init_Leak
   Memcheck:Leak
   match-leak-kinds: definite
   ...
   fun:ompi_mpi_init
   fun:PMPI_Init_thread
   fun:*edge*parallel*Mpi*start*
}

{
   ompi_mpi_finalize_invalid_read
   Memcheck:Addr*
   ...
   fun:ompi_mpi_finalize
   fun:*edge*parallel*Mpi*
}

{
   ompi_mpi_finalize_leak
   Memcheck:Leak
   ...
   fun:orte_finalize
   fun:ompi_mpi_finalize
   fun:*edge*parallel*Mpi*
}

{
   flush_to_zero
   Memcheck:Leak
   match-leak-kinds: possible
   ...
   fun:*edge*setups*Cpu*setFlushToZero*
   fun:main
}
