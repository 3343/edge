##
# @file This file is part of EDGE.
#
# @author Alexander Breuer (anbreuer AT ucsd.edu)
#
# @section LICENSE
# Copyright (c) 2016-2017, Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @section DESCRIPTION
# Suppressions for valgrind.
##

{
   MOAB, HDF5: Unitialized values
   Memcheck:Cond
   fun:__intel_sse2_strcpy
   fun:H5MM_xstrdup
   fun:H5E_register_class
   fun:H5E_init_interface
   fun:H5E_init
   fun:H5_init_library
   fun:H5open
   fun:__sti__$E
   fun:__libc_csu_init
   fun:(below main)
}

{
   gomp_team_start
   Memcheck:Leak
   match-leak-kinds: possible
   fun:calloc
   ...
   fun:pthread_create*
   fun:gomp_team_start
   fun:GOMP_parallel
   fun:*edge*parallel*Shared*init*
   fun:main
}

{
   iomp_kmp_init
   Memcheck:Param
   sched_setaffinity(mask)
   ...
   fun:*kmp_env_initialize*
   fun:*kmp_do_serial_initialize*
   fun:*kmp_get_global_thread_id_reg
   fun:*kmpc_fork_call
   fun:*edge*parallel*Shared*init*
   fun:main
}


{
   start_thread
   Memcheck:Leak
   match-leak-kinds: definite
   ...
   fun:event_base_loop
   fun:progress_engine
   fun:start_thread
   fun:clone
}

{
   orte_init
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:patcher_query
   fun:opal_memory_base_open
   fun:mca_base_framework_open
   fun:opal_init
   fun:orte_init
}

{
   PMPI_Init
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:ompi_mpi_init
   fun:PMPI_Init
   fun:*edge*parallel*Mpi*
   fun:main
}

{
   PMPI_Init_thread_malloc
   Memcheck:Leak
   fun:malloc
   ...
   fun:ompi_mpi_init
   fun:PMPI_Init_thread
   fun:*edge*parallel*Mpi*start*
   fun:main
}

{
   PMPI_Init_thread_calloc
   Memcheck:Leak
   fun:calloc
   ...
   fun:ompi_mpi_init
   fun:PMPI_Init_thread
   fun:*edge*parallel*Mpi*start*
   fun:main
}

{
   ompi_mpi_finalize
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:orte_finalize
   fun:ompi_mpi_finalize
   fun:*edge*parallel*Mpi*
   fun:main
}
